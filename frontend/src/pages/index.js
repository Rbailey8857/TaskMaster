import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import Web3Modal from 'web3modal';
import { useCallback, useEffect, useReducer } from 'react'
import { providers } from 'ethers'
import WalletConnectProvider from "@walletconnect/web3-provider";
import WalletLink from 'walletlink'
import React from 'react';

const inter = Inter({ subsets: ['latin'] })


const providerOptions = {
  walletconnect: {
    package: WalletConnectProvider, // required
    options: {
      infuraId: "2df30cadfe3e4702bac6294a7f50b6f3", // required
    },
  },
  'custom-walletlink': {
    display: {
      logo: 'https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0',
      name: 'Coinbase',
      description: 'Connect to Coinbase Wallet (not Coinbase App)',
    },
    options: {
      appName: 'Coinbase', // Your app name
      networkUrl: `https://mainnet.infura.io/v3/2df30cadfe3e4702bac6294a7f50b6f3`,
      chainId: 1,
    },
    package: WalletLink,
    connector: async (_, options) => {
      const { appName, networkUrl, chainId } = options
      const walletLink = new WalletLink({
        appName,
      })
      const provider = walletLink.makeWeb3Provider(networkUrl, chainId)
      await provider.enable()
      return provider
    },
  },
}

let web3Modal
if (typeof window !== 'undefined') {
  web3Modal = new Web3Modal({
    network: 'mainnet', // optional
    cacheProvider: true,
    providerOptions, // required
  })
}

const initialState = {
  provider: null,
  web3Provider: null,
  address: null,
  chainId: null,
};

function reducer(state, action) {
  switch (action.type) {
    case 'SET_WEB3_PROVIDER':
      return {
        ...state,
        provider: action.provider,
        web3Provider: action.web3Provider,
        address: action.address,
        chainId: action.chainId,
      }
    case 'SET_ADDRESS':
      return {
        ...state,
        address: action.address,
      }
    case 'SET_CHAIN_ID':
      return {
        ...state,
        chainId: action.chainId,
      }
    case 'RESET_WEB3_PROVIDER':
      return initialState
    default:
      throw new Error()
  }
}

export default function Home() {

  const [state, dispatch] = useReducer(reducer, initialState)
  const { provider, web3Provider, address, chainId } = state


  const connect = useCallback(async function () {
    // This is the initial `provider` that is returned when
    // using web3Modal to connect. Can be MetaMask or WalletConnect.
    const provider = await web3Modal.connect()

    // We plug the initial `provider` into ethers.js and get back
    // a Web3Provider. This will add on methods from ethers.js and
    // event listeners such as `.on()` will be different.
    const web3Provider = new providers.Web3Provider(provider)

    const signer = web3Provider.getSigner()
    const address = await signer.getAddress()

    const network = await web3Provider.getNetwork()

    dispatch({
      type: 'SET_WEB3_PROVIDER',
      provider,
      web3Provider,
      address,
      chainId: network.chainId,
    })
  }, [])

  const disconnect = useCallback(
    async function () {
      await web3Modal.clearCachedProvider()
      if (provider?.disconnect && typeof provider.disconnect === 'function') {
        await provider.disconnect()
      }
      dispatch({
        type: 'RESET_WEB3_PROVIDER',
      })
    },
    [provider]
  )




  return (
    <>
      <Head>
        <title>Todo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        {web3Provider ? (
          <>
            <div className='relative'>
              <button className="text-secondary font-gaj text-5xl absolute top-0 right-10" type="button" onClick={disconnect}>
                Logout
              </button>
            </div>
            <div>
              {/* TODO */}
            </div>
          </>
          
        ) : (
          //BEFORE LOGIN
          <>
            <div className='min-h-screen overflow-hidden flex flex-col justify-center items-center text-center'>
  <h1 className='text-primary font-gaj text-4xl md:text-7xl font-bold mb-8'>
    TaskMaster
  </h1>
  <button className='bg-secondary hover:bg-secondary-dark text-white font-gaj text-3xl md:text-5xl px-12 md:px-16 py-4 md:py-6 rounded-lg' type="button" onClick={connect}>
    Login
  </button>
</div>
s

          </>
          
        )}
    </>
  )
}
